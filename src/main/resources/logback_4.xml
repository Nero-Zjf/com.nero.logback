<?xml version="1.0" encoding="UTF-8"?>
<configuration
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://www.padual.com/java/logback.xsd"
        scan="true" scanPeriod="60 seconds" debug="false" packagingData="true">
    <!-- 日志输出编码 -->
    <property name="log.filePath" value="logs"/>
    <property name="log.append" value="true"/>
    <property name="log.maxHistory" value="30"/>
    <property name="log.encode" value="UTF-8"/>
    <!-- 日志的显式格式 -->
    <property name="log.pattern"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50}-%msg%n"/>
    <!-- 文件输出策略设置 -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 文件路径 -->
        <file>${log.filePath}/logback_fixed.log</file>
        <!-- 日志输出格式设置-->
        <encoder>
            <!-- 输出格式设置 -->
            <pattern>${log.pattern}</pattern>
            <!-- 编码设置 -->
            <charset>${log.encode}</charset>
        </encoder>
        <!--如果是 true，日志会被安全的写入文件，即使其他的FileAppender也在向此文件做写入操作，效率低，默认是 false。-->
        <prudent>false</prudent>
        <!--FixedWindowRollingPolicy:设置为按照索引的方式滚动，定义文件名称的时候使用%i作为占位符，滚动后会会用角标替换 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <fileNamePattern>${log.filePath}/logback_fixed-%i.log</fileNamePattern>
            <minIndex>1</minIndex>
            <maxIndex>3</maxIndex>
        </rollingPolicy>
        <!-- 指定文件最大尺寸，达到该尺寸，就触发rollingPolicy对应的策略，maxFileSize属性指定文件大小 -->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <maxFileSize>3KB</maxFileSize>
        </triggeringPolicy>
        <!-- 过滤器，过滤掉不是指定日志水平的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 设置日志级别 -->
            <level>INFO</level>
            <!-- 如果跟该日志水平相匹配，则接受 -->
            <onMatch>ACCEPT</onMatch>
            <!-- 如果跟该日志水平不匹配，则过滤掉 -->
            <onMismatch>ACCEPT</onMismatch>
        </filter>
    </appender>
    <!-- consoleAppender：控制台输出 -->
    <appender name="STDOUT"
              class="ch.qos.logback.core.ConsoleAppender">
        <!-- encoder:对日志日期格式化,类似于layout，除了将时间转化为数组，还会将转换后的数组输出到相应的文件中 -->
        <encoder>
            <!-- 定义日志的输出格式 -->
            <pattern>${log.pattern}</pattern>
            <!-- 设置信息编码 -->
            <charset>${log.encode}</charset>
        </encoder>
    </appender>
    <!-- 子节点logger:用来设置某一个包或具体的某一个类的日志打印级别、以及指定Appender -->
    <!--
    name:指定此logger管理的包或者类
    level:指定此logger的消息输出级别
    additivity:默认为true,是否向上级logger传递消息
    -->
    <logger name="com.nero.logback.domain" level="DEBUG" additivity="false">
        <appender-ref ref="STDOUT"/>
    </logger>
    <!-- 根Logger节点，最顶级-->
    <root level="DEBUG">
        <appender-ref ref="FILE"/>
<!--        <appender-ref ref="STDOUT"/>-->
    </root>
</configuration>